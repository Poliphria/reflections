What happens when you initialize a repository? Why do you need to do it?

    When you run 'git init' a '.git' directory is made in the directory 
    that you ran init on and it holds metadata on the revision history 
    of files in that directory. You need to do it otherwise git cannot
    commit or show file history. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is like a middle man between the repository and the working directory.
    It acts as a place to hold files that are waiting to be commited. The value it offers
    is more flexibility because you are able to choose what you want to commit or if you end
    up not wanting to commit something you can remove it with 'git reset <file>'

How can you use the staging area to make sure you have one commit per logical change?

    You can use the staging area to compare the differences between working directory 
    and the staging area (initial staging area will have same files as the commit you are
    on).

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

    A situation in which keeping history organized is important is when trying experimental features or changes,
    but you do not want to change the master branch. 

How do the diagrams help you visualize the branch structure?

    The diagrams help visualize the history of a repository. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

    The result of merging two branches together is that the master branch's latest commit 
    node will have a parent of both the master branch and the merged branch, but it will 
    now all be part of the master branch.
